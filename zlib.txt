#include <iostream>
using namespace std;
int main(){

}

#include <iostream>
#include <iomanip>
#include <string>
#include <cmath>
#include <algorithm>
#define PI 3.14159265
int main ()
{
  double param, result;
  param = 30.0;
  result = sin (param*PI/180);
  printf ("The sine of %f degrees is %f.\n", param, result );

  double x = -87.91, result;
  result = abs(x);
  cout << "abs(" << x << ") = |" << x << "| = " << result << endl;
  return 0;
}

#include <bits/stdc++.h>
using namespace std;
int main() {
    int n;
    cin >> n;

    unordered_set<string> seen;

    int count = 0;
    for(int i = 0; i < n; i++) {
        string s1, s2;
        cin >> s1 >> s2;

        if(seen.count(s1) == 0 && count < 12) {
            cout << s1 << " " << s2 << endl;
            count++;
        }
        seen.insert(s1);
    }
}

#include <iostream>
#include <string>
using namespace std;
int main() {
    bool ball[3] = {true, false, false};
    string moves;
    cin >> moves;
    for(int i = 0; i < moves.size(); i++) {
        if(moves[i] == 'A') {
            swap(ball[0], ball[1]);
        }
        if(moves[i] == 'B') {
            swap(ball[1], ball[2]);
        }
        if(moves[i] == 'C') {
            swap(ball[0], ball[2]);
        }
    }
    if(ball[0]) {
        cout << "1" << endl;
    }
    if(ball[1]) {
        cout << "2" << endl;
    }
    if(ball[2]) {
        cout << "3" << endl;
    }
}



#include <iostream>
#include <algorithm>
using namespace std;
int main(){
    int case_number, n;
    cin >> case_number;

    for ( int c = 1; c <= case_number;  c++ ){
       cin >> n;
       long int guest[ n ];

       for ( int i = 0;  i < n;  i++)
           cin >> guest[ i ];

       sort( guest, guest+n );

       for ( int i = 0; i < n ; i++) {
           if ( guest[ i ] != guest[ i - 1 ]  &&  guest[ i ] != guest[ i + 1 ])
              cout << "Case #" << c << ": " << guest[i] << endl;
       }
    }

    return 0;
}
#include <iostream>
#include <iomanip>
using namespace std;
int main(){

cout << fixed;
cout.precision(3);
}
